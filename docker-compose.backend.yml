services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./monitor:/app/monitor
      - ./schemas:/app/schemas
    environment:
      - MDJOURNEY_ENV=production
      - MONITOR_PATH=/app/monitor
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - MDJOURNEY_API_KEY=${MDJOURNEY_API_KEY:-your-secure-api-key-here}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/metadata.db}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    # internal only; do not publish to host in production
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    volumes:
      - ./monitor:/app/monitor
      - ./schemas:/app/schemas
    environment:
      - MDJOURNEY_ENV=production
      - MONITOR_PATH=/app/monitor
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - api:
          condition: service_healthy
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    # Use image-defined healthcheck which looks for app.monitors.folder_monitor

volumes:
  redis_data:
