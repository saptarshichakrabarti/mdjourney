# ---- Builder Stage ----
# This stage installs dependencies into a virtual environment.
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /opt/venv

# Prevent Python from writing .pyc files
ENV PYTHONDONTWRITEBYTECODE 1
# Ensure Python output is sent straight to the terminal
ENV PYTHONUNBUFFERED 1

# Create a virtual environment
RUN python -m venv .

# Activate the virtual environment for subsequent commands
ENV PATH="/opt/venv/bin:$PATH"

# Install system dependencies needed for building
RUN apt-get update && apt-get install -y \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install build tools and dependencies using the pinned requirements file
COPY requirements-api.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-api.txt

# ---- Final Stage ----
# This stage creates the small, production-ready image.
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set a non-root user for security
RUN addgroup --system app && adduser --system --group app

# Set working directory
WORKDIR /home/app

# Copy the virtual environment from the builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy the application code
COPY ./app ./app
COPY ./api ./api
COPY ./packaged_schemas ./packaged_schemas
COPY ./scripts ./scripts

# Copy Docker configuration
COPY .fair_meta_config.docker.yaml ./.fair_meta_config.yaml

# Activate the virtual environment
ENV PATH="/opt/venv/bin:$PATH"

# Change ownership to app user
RUN chown -R app:app /home/app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Start the API with uvicorn
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2", "--timeout-keep-alive", "75", "--proxy-headers"]
