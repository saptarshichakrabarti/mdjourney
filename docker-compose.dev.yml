services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/monitor
      - ./packaged_schemas:/app/packaged_schemas
      - ./app:/app/app
      - ./api:/app/api
      - ./scripts:/app/scripts
    environment:
      - MDJOURNEY_ENV=development
      - MONITOR_PATH=/app/monitor
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
      - VITE_API_TIMEOUT=${VITE_API_TIMEOUT:-30000}
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    volumes:
      - ./data:/app/monitor
      - ./packaged_schemas:/app/packaged_schemas
      - ./app:/app/app
      - ./scripts:/app/scripts
    environment:
      - MDJOURNEY_ENV=development
      - MONITOR_PATH=/app/monitor
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "app.monitors.folder_monitor"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data: