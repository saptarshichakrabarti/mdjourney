[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "api*"]

[project]
name = "mdjourney"
version = "0.1.0"
description = "FAIR-compliant research data metadata automation system"
authors = [
    {name = "Saptarshi Chakrabarti", email = "saptarshi.chakrabarti@kuleuven.be"},
    {name = "LISCO-LMIB"}
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["FAIR", "metadata", "research-data", "automation", "scientific-computing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: System :: Filesystems",
]
requires-python = ">=3.8"
dependencies = [
    "watchdog>=3.0.0",
    "jsonschema>=4.0.0",
    "dirmeta>=0.1.0",
    "pyyaml>=6.0.0",
    "questionary>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pylint>=2.17.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "pip-tools>=7.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
]
api = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic>=2.12.0",
    "python-multipart==0.0.6",
]

[project.scripts]
mdjourney = "mdjourney:main"

[project.gui-scripts]
mdjourney-gui = "app.gui:main"

[project.urls]
Homepage = "https://github.com/saptarshichakrabarti/mdjourney"
Documentation = "https://github.com/saptarshichakrabarti/mdjourney/blob/main/docs/README.md"
Repository = "https://github.com/saptarshichakrabarti/mdjourney"
"Bug Tracker" = "https://github.com/saptarshichakrabarti/mdjourney/issues"
Changelog = "https://github.com/saptarshichakrabarti/mdjourney/blob/main/CHANGELOG.md"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "api"]
known_third_party = ["pytest", "watchdog", "jsonschema", "dirmeta"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".pytest_cache",
    ".mypy_cache",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "watchdog.*",
    "dirmeta.*",
    "jsonschema.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "C0103",  # invalid-name
]

[tool.pylint.format]
max-line-length = 88

[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
markers = [
    "unit: unit tests",
    "integration: integration tests",
    "regression: regression tests",
]
